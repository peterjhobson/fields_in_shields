#
# -*- coding: utf-8 -*-
"""
Created on Thu Feb 14 11:27:56 2019

@author: PJ Hobson

Calculate magnetic field generated by current loops numerically using the Biotâ€“Savart Law.
"""

import numpy as np


def db(coord_measure, coord_wire0, coord_wire1):
    """Measure the magnetic field generated by a set of wire elements.

    Keyword arguments:
    coord_measure -- measurement point in Cartesian coordinates
    coord_wire0 -- starting point of wire elements in Cartesian coordinates
    coord_wire1 -- end point of wire elements in Cartesian coordinates
    """

    coord_dl = 0.5 * (coord_wire1 + coord_wire0)
    dl = (coord_wire1 - coord_wire0)

    r_prime = coord_measure - coord_dl

    return 1e-7 * np.cross(dl, r_prime) / np.tile(np.linalg.norm(r_prime, axis=1) ** 3, (3, 1)).transpose()


def b(coord_measure, coords_wire):
    """Measure the magnetic field generated by a wire loop composed of discrete elements.

    Keyword arguments:
    coord_measure -- measurement point in Cartesian coordinates
    coords_wire -- discrete coordinates of wire in Cartesian coordinates
    """

    return np.sum(db(coord_measure, coords_wire[:-1],
                     np.roll(coords_wire, -1, axis=0)[:-1]), axis=0)


def b_contours(coords_measure, cts, curr=1):
    """Measure the magnetic field generated by contours on a cylindrical surface.

    Keyword arguments:
    coords_measure -- measurement points in Cartesian coordinates
    cts -- contours in Cartesian coordinates output from targetpoints.poltocartcontour() function
    curr -- current scaling
    """

    field = np.zeros((np.shape(coords_measure)))

    for p in range(field.shape[0]):

        for i in range(len(cts)):
            field[p, :] += curr * b(coords_measure[p, :], cts[i])

    return field


def linestyle_cylindrical(cts_cylindrical):
    """Defines the line-style of clockwise and anticlockwise contours on a cylindrical surface.

    Keyword arguments:
    cts_cylindrical -- contours in cylindrical coordinates output from targetpoints.poltocartcontour() function

    """

    plotdash = []

    for i in range(len(cts_cylindrical)):

        d_v = 0

        if np.allclose(cts_cylindrical[i][0, 2], cts_cylindrical[i][:, 2], atol=1e-6):

            if (np.isclose(cts_cylindrical[i][0, 1], 0, atol=1e-6) and
                    np.isclose(cts_cylindrical[i][-1, 1], 2 * np.pi, atol=1e-6)):

                plotdash.append('--')

            elif (np.isclose(cts_cylindrical[i][0, 1], 2 * np.pi, atol=1e-6) and
                  np.isclose(cts_cylindrical[i][-1, 1], 0, atol=1e-6)):
                plotdash.append('-')

            else:
                plotdash.append('-.')

        else:

            for k in range(len(cts_cylindrical[i]) - 2):
                vc = np.cross(np.array((cts_cylindrical[i][k + 1, 1] - cts_cylindrical[i][k, 1],
                                        cts_cylindrical[i][k + 1, 2] - cts_cylindrical[i][k, 2], 0.)),
                              np.array((cts_cylindrical[i][k + 2, 1] - cts_cylindrical[i][k + 1, 1],
                                        cts_cylindrical[i][k + 2, 2] - cts_cylindrical[i][k + 1, 2], 0.)))

                d_v += vc[2]

            if np.sign(d_v) == 1:
                plotdash.append('--')

            elif np.sign(d_v) == -1:
                plotdash.append('-')

            else:
                plotdash.append('-.')

    return plotdash
